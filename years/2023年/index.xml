<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023年 on 记录每个瞬间</title>
    <link>https://code0xff.org/years/2023%E5%B9%B4/</link>
    <description>Recent content in 2023年 on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 07 Jan 2023 20:05:19 +0800</lastBuildDate><atom:link href="https://code0xff.org/years/2023%E5%B9%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Materialization Strategies in the Vertica Analytic Database: Lessons Learned</title>
      <link>https://code0xff.org/post/2023/01/materialization-strategies-in-the-vertica-analytic-database-lessons-learned/</link>
      <pubDate>Sat, 07 Jan 2023 20:05:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/materialization-strategies-in-the-vertica-analytic-database-lessons-learned/</guid>
      <description>列存数据库会通过物化的方式来重建tuple，包括早期物化EM、延迟物化LM，延迟物化的性能更好，但实现更难，当出现join溢出时会出现，此时会退回到早期物化；论文在早期物化基础上增加了：边信息传递SIP技术，并给出了实现细节，如何创建SIP，如何做push down；使用EM+SIP技术，比原始的EM性能大幅度提升，并且在很多场景下比延迟物化LM性能更好</description>
    </item>
    
    <item>
      <title>MonetDB/X100: Hyper-Pipelining Query Execution</title>
      <link>https://code0xff.org/post/2023/01/monetdbx100-hyper-pipelining-query-execution/</link>
      <pubDate>Thu, 05 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/monetdbx100-hyper-pipelining-query-execution/</guid>
      <description>2005年的一篇论文，通过分析MySQL、MonetDB发现这两种没有达到硬件上的预期效果，MySQL是因为经典的火山模型导致编译器没法利用循环流水线，出现大量CPU等待；而MonetDB避免了上述情况但使用了物化，又导致大量的内存带宽拷贝；这篇论文结合了这两者的特点，选择了向量化的执行方式，并配合了合适的cache size，使得执行效率大幅度提升</description>
    </item>
    
    <item>
      <title>Access Path Selection in Main-Memory Optimized Data Systems Should I Scan or Should I Probe</title>
      <link>https://code0xff.org/post/2023/01/access-path-selection-in-main-memory-optimized-data-systems-should-i-scan-or-should-i-probe/</link>
      <pubDate>Tue, 03 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/access-path-selection-in-main-memory-optimized-data-systems-should-i-scan-or-should-i-probe/</guid>
      <description>CMU Query Execution &amp;amp; Processing课程的一篇论文，现代分析系统中scan越来越重要，但二级索引依然有用，通过对比硬件参数、数据布局、压缩、并发等综合情况考虑之下，来选择：scan执行 或者index执行；通过性能评估发现，调节scan或者index并不是一个固定的值，而是根据不同的参数以及硬件情况，会动态变化的</description>
    </item>
    
    <item>
      <title>Photon A Fast Query Engine for Lakehouse Systems</title>
      <link>https://code0xff.org/post/2023/01/photon-a-fast-query-engine-for-lakehouse-systems/</link>
      <pubDate>Mon, 02 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/photon-a-fast-query-engine-for-lakehouse-systems/</guid>
      <description>Databricks 2022年在SIGMOD上发表的论文(最佳工业论文奖)，由于I/O方面有很多优化措施，而JVM的对向量化支持较差，之后用C++实现了向量化的执行引擎Photon，来实现进一步的性能提升；首先是从最底层scan开始替换，因为中间替换的代价较高，之后不断往上，直到某个算子Photon不能适配，则由列存转换为Spark的行存，退回到Spark执行，总体看性能可以提升好几倍</description>
    </item>
    
    <item>
      <title>MySQL的并发</title>
      <link>https://code0xff.org/post/2023/01/mysql%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sun, 01 Jan 2023 08:15:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/mysql%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
      <description>MVCC的基本概念，读已提交、可重复读隔离级别下的ReadView，MVCC的purage；锁的基本类型，X/S/IX/IS锁；record lock、gap lock、next-key lock、insert intention lock、隐式锁；各种隔离级别下的加锁过程，SHOW ENGINE INNODB STATUS 分析加锁过程，死锁的分析</description>
    </item>
    
  </channel>
</rss>
