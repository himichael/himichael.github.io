<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023年 on 记录每个瞬间</title>
    <link>https://code0xff.org/years/2023%E5%B9%B4/</link>
    <description>Recent content in 2023年 on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 03 May 2023 11:23:04 +0800</lastBuildDate><atom:link href="https://code0xff.org/years/2023%E5%B9%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What Goes Around Comes Around</title>
      <link>https://code0xff.org/post/2023/05/what-goes-around-comes-around/</link>
      <pubDate>Wed, 03 May 2023 11:23:04 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/what-goes-around-comes-around/</guid>
      <description>Stonebraker的论文，介绍了 9个不同时代的数据模型</description>
    </item>
    
    <item>
      <title>LevelDB 多版本和压缩</title>
      <link>https://code0xff.org/post/2023/04/levedb-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%92%8C%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Fri, 14 Apr 2023 19:20:03 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/04/levedb-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%92%8C%E5%8E%8B%E7%BC%A9/</guid>
      <description>LevelDB 多版本和压缩</description>
    </item>
    
    <item>
      <title>LevelDB 辅助工具类</title>
      <link>https://code0xff.org/post/2023/04/levedb-%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
      <pubDate>Tue, 11 Apr 2023 09:20:01 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/04/levedb-%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
      <description>LevelDB 的辅助工具类，如内存分配、编码、LRU、bloom filter等</description>
    </item>
    
    <item>
      <title>LevelDB SSTable模块</title>
      <link>https://code0xff.org/post/2023/04/levedb-sstable%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 09 Apr 2023 09:22:11 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/04/levedb-sstable%E6%A8%A1%E5%9D%97/</guid>
      <description>LevelDB 的SSTable模块，存储在磁盘上的结构，包括文件格式的组织、数据文件块是如何读取的、索引文件块是如何组织的</description>
    </item>
    
    <item>
      <title>LevelDB MemTable模块</title>
      <link>https://code0xff.org/post/2023/04/levedb-memtable%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Thu, 06 Apr 2023 11:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/04/levedb-memtable%E6%A8%A1%E5%9D%97/</guid>
      <description>LevelDB 的MemTable模块，底层使用 skip-list实现的，用来实现内存的读、写操作</description>
    </item>
    
    <item>
      <title>LevelDB Log模块</title>
      <link>https://code0xff.org/post/2023/04/levedb-log%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 03 Apr 2023 11:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/04/levedb-log%E6%A8%A1%E5%9D%97/</guid>
      <description>LevelDB 的Log模块，用来实现WAL</description>
    </item>
    
    <item>
      <title>LevelDB 公开的接口</title>
      <link>https://code0xff.org/post/2023/03/levedb-%E5%85%AC%E5%BC%80%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Thu, 30 Mar 2023 11:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/03/levedb-%E5%85%AC%E5%BC%80%E6%8E%A5%E5%8F%A3/</guid>
      <description>LevelDB 的 src/include目录下的公开接口、跨平台的移植(对文件读写、线程、锁做了简单封装方便了跨平台迁移)，读写流程的大致流程等</description>
    </item>
    
    <item>
      <title>LevelDB 基本概念</title>
      <link>https://code0xff.org/post/2023/03/levedb-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 27 Mar 2023 11:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/03/levedb-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>LevelDB的架构，各个组件的基本原理，一些基本操作(open、增删改)，高级特性(options、自定义比较器)</description>
    </item>
    
    <item>
      <title>OceanBase开发者大会分享</title>
      <link>https://code0xff.org/post/2023/03/oceanbase%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/</link>
      <pubDate>Sun, 26 Mar 2023 11:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/03/oceanbase%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/</guid>
      <description>看了几位大佬的分享，总结一下</description>
    </item>
    
    <item>
      <title>bustub数据库</title>
      <link>https://code0xff.org/post/2023/03/bustub%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Mon, 20 Mar 2023 14:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/03/bustub%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>卡耐基梅隆的bustub数据库，实验课程；包括：LRU-k实现、可扩展的hash表、B+的的增删改查、B+树的并发控制、各种SQL算子的执行和优化，并发处理</description>
    </item>
    
    <item>
      <title>CPU and Cache Efficient Management of Memory-Resident Databases</title>
      <link>https://code0xff.org/post/2023/02/cpu-and-cache-efficient-management-of-memory-resident-databases/</link>
      <pubDate>Wed, 08 Feb 2023 17:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/cpu-and-cache-efficient-management-of-memory-resident-databases/</guid>
      <description>CPU and Cache Efficient Management of Memory-Resident Databases</description>
    </item>
    
    <item>
      <title>Efficiently Compiling Efficient Query Plans for Modern Hardware</title>
      <link>https://code0xff.org/post/2023/02/efficiently-compiling-efficient-query-plans-for-modern-hardware/</link>
      <pubDate>Sun, 05 Feb 2023 17:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/efficiently-compiling-efficient-query-plans-for-modern-hardware/</guid>
      <description>这是HyPer的一篇论文(HyPer是由德国莫尼黑大学主导的OLAP、OLTP混合型主内存数据库)，介绍了code-gen的具体实现，最初HyPer的code-gen是生成了C++代码，然后使用gcc编译；但编译时间很长，再加上优化时间就更长了，甚至比查询执行时间还长；于是HyPer做了优化，改用LLVM，将code-gen的核心代码转为了LLVM的IR，这个IR是调用LLVM的API生成的，不是手写的所以相对容易一些，对于一些简单的操作是生成了LLVM，于是复杂的操作，如scan、join、sort需要将LLVM和C++混合执行，LLVM可以直接调用C++，所以不存在性能损失；通过最后执行来看，LLVM的code-gen从编译、优化时间，SQL执行时间，都比其他系统有很大提升</description>
    </item>
    
    <item>
      <title>Generating code for holistic query evaluation</title>
      <link>https://code0xff.org/post/2023/02/generating-code-for-holistic-query-evaluation/</link>
      <pubDate>Sat, 04 Feb 2023 07:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/generating-code-for-holistic-query-evaluation/</guid>
      <description>英国爱丁堡大学的一篇论文，从传统系统到现代系统的变化一个重要点是：内存增大很多，以前的I/O瓶颈对于现在来说不那么重要了，反而是CPU和内存瓶颈；而之前的火山模型对于CPU利用率来说很不好，大量的虚函数调用，多层级的函数调用增加了cache miss，也会产生更多的指令，不利于并行化和cache局部性；这篇论文提出了一个代码模板，通过识别不同的查询计划算子，来对应的生成不同的代码(对应一个大函数)，不同函数之间通过物化来连接，之后通过编译器GCC来编译这段C代码，还可以对代码最O2级别优化(但会增加运行期执行时间)来达到更好的效果，论文对比了join、sort、聚合，虽然使用的是NSM存储模型，但是执行效果来看跟MonetDB的DSM差不多了；代码生成的缺点是对于小查询会有额外的开销(编译、优化、link时间)</description>
    </item>
    
    <item>
      <title>Implementing Database Operations Using SIMD Instructions</title>
      <link>https://code0xff.org/post/2023/02/implementing-database-operations-using-simd-instructions/</link>
      <pubDate>Wed, 01 Feb 2023 07:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/implementing-database-operations-using-simd-instructions/</guid>
      <description>介绍了SIMD指令一些基本概念，并行流水线，以及分支预测失败带来的影响；论文中提到了使用SIMD指令的方式，以及不同平台产生的差异；之后用伪代码的方式描述几个数据库常用操作；scan操作详细对比了标量版和SIMD版的区别，以及如何消除分支的方式，还有返回选中的一个元素、多个元素的标量、SIMD方式；聚合的实现方式SIMD有提供相关的操作 SIMD_min、SIMD_max即可，对于索引部分主要是介绍树结构索引，详细讨论了中间节点、叶子节点的实现方式；在有序元素上使用二分效率是非常高的，但也会有分支预测失败问题，论文中给出了混合二分+顺序扫描方式；最后是join处理方式，这里只列出了nested-loop join的SIMD实现，Duplicate-outer、Duplicate-inner、Rotate-inner</description>
    </item>
    
    <item>
      <title>Rethinking SIMD Vectorization for In-Memory Databases</title>
      <link>https://code0xff.org/post/2023/01/rethinking-simd-vectorization-for-in-memory-databases/</link>
      <pubDate>Fri, 27 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/rethinking-simd-vectorization-for-in-memory-databases/</guid>
      <description>这是Oracle联合哥伦比亚大学做的研究，论文中讨重点讨论了数据并行化(线程、指令、数据)，也就是SIMD实现；论文中给出了一些基本的SIMD操作，如selective sotre/load、gather、scatter，在论文发表的时候，这几个操作主流CPU不是全支持，只能通过一些模拟操作来支持，如permutation等；通过定义这四个最基本的操作，再往上就可以定义数据库查询中比较重要的操作了，如：scan、hash-table(horizontal、vertical、build、线性探测、double hash、cuckoo hash)、bloom filter、分区(radix、hash、range)；通过hash、分区等操作，又可以定义出排序、join等更复杂的操作，相当于是层层搭积木；测试结果SIMD会有大幅度性能提升，但也受到cache size的影响</description>
    </item>
    
    <item>
      <title>Advanced Database Systems: Query Execution &amp; Processing</title>
      <link>https://code0xff.org/post/2023/01/advanced-database-systems-query-execution-and-processing/</link>
      <pubDate>Sun, 22 Jan 2023 19:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/advanced-database-systems-query-execution-and-processing/</guid>
      <description>这一部分是属于 执行引擎组件，由于现代系统从I/O变为CPU瓶颈，CPU的指令依赖、分支预测就阻塞了并行优化；MonetDB/X100就指出了火山模型、物化模型的问题，后使用了向量化/批模型来优化，为后续系统提供了方向。查询处理又包括：自顶向下vs字底向上；并行化包括：水平(exchange算子)、垂直、以及混合；worker的分配还包括单核单线程、单核pool；列存重建使用早期物化+SIP达到了早期物化的简单，同时兼具性能；主内存系统中二级索引和scan都有用，但需要综合考虑：选择性；硬件参数、数据布局、并发，优化器也需要配合重构整合；Oracle首创的混合行+列存储，又进一步提供了表达式替换(本质上是语法树子节点替换)</description>
    </item>
    
    <item>
      <title>SIMD-Scan: Ultra Fast in-Memory Table Scan using onChip Vector Processing Units</title>
      <link>https://code0xff.org/post/2023/01/ultra-fast-in-memory-table-scan-using-onchip-vector-processing-units/</link>
      <pubDate>Thu, 19 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/ultra-fast-in-memory-table-scan-using-onchip-vector-processing-units/</guid>
      <description>现代数据库由I/O瓶颈转向了CPU瓶颈，利用多核能力加速全表扫描，但是向量化的能力没能充分发挥。使用向量化包括：内嵌汇编、硬件厂商提供的跨平台库函数、编译器指示符、编译器自动优化，每种都是可用性和可控性之间的权衡。论文中引入了两项优化：使用SIMD方式在寄存器中解压 轻量压缩数据(使用concatenate、shift、shuffle、mark等指令完成)；使用SIMD完成等值和范围查找(使用掩码指令，将4个元素加载到寄存器中，再通过min、max比较范围，最后生成索引数组向量位)，通过测试结果都有大幅度提升，并且优化实现可以适用各种数据库</description>
    </item>
    
    <item>
      <title>Make the most out of your SIMD investments: counter control flow divergence in compiled query pipelines</title>
      <link>https://code0xff.org/post/2023/01/make-the-most-out-of-your-simd-investments/</link>
      <pubDate>Tue, 17 Jan 2023 06:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/make-the-most-out-of-your-simd-investments/</guid>
      <description>现代数据库很多都采用了向量化执行，也就是利用 SIMD 指令，SIMD指令在碰到分支时，会出现部分元素不满足条件，导致不活跃影响利用率吞吐量下降，论文中利用了 AVX512指令集的：mark指令、permute指令、compress、expand，来实现重填充算法和策略；包括：全消费策略(需增加寄存器，主要利用buffer)，以及部分消费策略(增加新寄存器，利用mark)，在能放入cache的场景中，这两种算法表现的都不错，是scalar的两倍，但对于复杂场景，以及cache放不下的场景则表现退化，另外如何设置 阈值也是一个开放问题</description>
    </item>
    
    <item>
      <title>Accelerating Analytics with Dynamic In-Memory Expressions</title>
      <link>https://code0xff.org/post/2023/01/accelerating-analytics-with-dynamic-in-memory-expressions/</link>
      <pubDate>Fri, 13 Jan 2023 14:05:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/accelerating-analytics-with-dynamic-in-memory-expressions/</guid>
      <description>Oracle12推出了混合行/列的存储格式，磁盘(buffer pool)中按列存储，内存中按列存储加速OLAP场景；而表达式求值在很多场景下是黑盒，不易监控、也占用资源，Oracle捕获了频繁使用的表达式，将表达式物化到内存中，然后在查询计划中，根据代价来改变查询计划，将原始的查询计划的子树，替换为内存中的物化表达式，在OLAP场景中大幅度提升性能，在混合OLTP场景中也非常有效</description>
    </item>
    
    <item>
      <title>Materialization Strategies in the Vertica Analytic Database: Lessons Learned</title>
      <link>https://code0xff.org/post/2023/01/materialization-strategies-in-the-vertica-analytic-database-lessons-learned/</link>
      <pubDate>Sat, 07 Jan 2023 20:05:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/materialization-strategies-in-the-vertica-analytic-database-lessons-learned/</guid>
      <description>列存数据库会通过物化的方式来重建tuple，包括早期物化EM、延迟物化LM，延迟物化的性能更好，但实现更难，当出现join溢出时会出现，此时会退回到早期物化；论文在早期物化基础上增加了：边信息传递SIP技术，并给出了实现细节，如何创建SIP，如何做push down；使用EM+SIP技术，比原始的EM性能大幅度提升，并且在很多场景下比延迟物化LM性能更好</description>
    </item>
    
    <item>
      <title>MonetDB/X100: Hyper-Pipelining Query Execution</title>
      <link>https://code0xff.org/post/2023/01/monetdbx100-hyper-pipelining-query-execution/</link>
      <pubDate>Thu, 05 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/monetdbx100-hyper-pipelining-query-execution/</guid>
      <description>2005年的一篇论文，通过分析MySQL、MonetDB发现这两种没有达到硬件上的预期效果，MySQL是因为经典的火山模型导致编译器没法利用循环流水线，出现大量CPU等待；而MonetDB避免了上述情况但使用了物化，又导致大量的内存带宽拷贝；这篇论文结合了这两者的特点，选择了向量化的执行方式，并配合了合适的cache size，使得执行效率大幅度提升</description>
    </item>
    
    <item>
      <title>Access Path Selection in Main-Memory Optimized Data Systems Should I Scan or Should I Probe</title>
      <link>https://code0xff.org/post/2023/01/access-path-selection-in-main-memory-optimized-data-systems-should-i-scan-or-should-i-probe/</link>
      <pubDate>Tue, 03 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/access-path-selection-in-main-memory-optimized-data-systems-should-i-scan-or-should-i-probe/</guid>
      <description>CMU Query Execution &amp;amp; Processing课程的一篇论文，现代分析系统中scan越来越重要，但二级索引依然有用，通过对比硬件参数、数据布局、压缩、并发等综合情况考虑之下，来选择：scan执行 或者index执行；通过性能评估发现，调节scan或者index并不是一个固定的值，而是根据不同的参数以及硬件情况，会动态变化的</description>
    </item>
    
    <item>
      <title>Photon A Fast Query Engine for Lakehouse Systems</title>
      <link>https://code0xff.org/post/2023/01/photon-a-fast-query-engine-for-lakehouse-systems/</link>
      <pubDate>Mon, 02 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/photon-a-fast-query-engine-for-lakehouse-systems/</guid>
      <description>Databricks 2022年在SIGMOD上发表的论文(最佳工业论文奖)，由于I/O方面有很多优化措施，而JVM的对向量化支持较差，之后用C++实现了向量化的执行引擎Photon，来实现进一步的性能提升；首先是从最底层scan开始替换，因为中间替换的代价较高，之后不断往上，直到某个算子Photon不能适配，则由列存转换为Spark的行存，退回到Spark执行，总体看性能可以提升好几倍</description>
    </item>
    
    <item>
      <title>MySQL的并发</title>
      <link>https://code0xff.org/post/2023/01/mysql%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sun, 01 Jan 2023 08:15:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/mysql%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
      <description>MVCC的基本概念，读已提交、可重复读隔离级别下的ReadView，MVCC的purage；锁的基本类型，X/S/IX/IS锁；record lock、gap lock、next-key lock、insert intention lock、隐式锁；各种隔离级别下的加锁过程，SHOW ENGINE INNODB STATUS 分析加锁过程，死锁的分析</description>
    </item>
    
  </channel>
</rss>
