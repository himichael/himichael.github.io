<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SIMD on 记录每个瞬间</title>
    <link>https://code0xff.org/tags/simd/</link>
    <description>Recent content in SIMD on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 19 Jan 2023 10:35:19 +0800</lastBuildDate><atom:link href="https://code0xff.org/tags/simd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SIMD-Scan: Ultra Fast in-Memory Table Scan using onChip Vector Processing Units</title>
      <link>https://code0xff.org/post/2023/01/ultra-fast-in-memory-table-scan-using-onchip-vector-processing-units/</link>
      <pubDate>Thu, 19 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/ultra-fast-in-memory-table-scan-using-onchip-vector-processing-units/</guid>
      <description>现代数据库由I/O瓶颈转向了CPU瓶颈，利用多核能力加速全表扫描，但是向量化的能力没能充分发挥。使用向量化包括：内嵌汇编、硬件厂商提供的跨平台库函数、编译器指示符、编译器自动优化，每种都是可用性和可控性之间的权衡。论文中引入了两项优化：使用SIMD方式在寄存器中解压 轻量压缩数据(使用concatenate、shift、shuffle、mark等指令完成)；使用SIMD完成等值和范围查找(使用掩码指令，将4个元素加载到寄存器中，再通过min、max比较范围，最后生成索引数组向量位)，通过测试结果都有大幅度提升，并且优化实现可以适用各种数据库</description>
    </item>
    
    <item>
      <title>Make the most out of your SIMD investments: counter control flow divergence in compiled query pipelines</title>
      <link>https://code0xff.org/post/2023/01/make-the-most-out-of-your-simd-investments/</link>
      <pubDate>Tue, 17 Jan 2023 06:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/make-the-most-out-of-your-simd-investments/</guid>
      <description>现代数据库很多都采用了向量化执行，也就是利用 SIMD 指令，SIMD指令在碰到分支时，会出现部分元素不满足条件，导致不活跃影响利用率吞吐量下降，论文中利用了 AVX512指令集的：mark指令、permute指令、compress、expand，来实现重填充算法和策略；包括：全消费策略(需增加寄存器，主要利用buffer)，以及部分消费策略(增加新寄存器，利用mark)，在能放入cache的场景中，这两种算法表现的都不错，是scalar的两倍，但对于复杂场景，以及cache放不下的场景则表现退化，另外如何设置 阈值也是一个开放问题</description>
    </item>
    
  </channel>
</rss>
