<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>列存 on 记录每个瞬间</title>
    <link>https://code0xff.org/tags/%E5%88%97%E5%AD%98/</link>
    <description>Recent content in 列存 on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 07 May 2023 13:23:04 +0800</lastBuildDate><atom:link href="https://code0xff.org/tags/%E5%88%97%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Column-Stores vs. Row-Stores: How Different Are They Really?</title>
      <link>https://code0xff.org/post/2023/05/column-stores_vs_row-stores_how_different_are_they_really/</link>
      <pubDate>Sun, 07 May 2023 13:23:04 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/column-stores_vs_row-stores_how_different_are_they_really/</guid>
      <description>论文中通过行存系统来模拟列存，并将几个可能提升的关键点：延迟物化、块迭代、压缩、invisible-join，挨个拆分，并分析每种可能提升的原因和提升比例‘在行存的系统中使用垂直分区依然达不到列存性能，因为垂直分区后需要冗余存储主键，重建这些tuple 需要hash-join，数量大内存CPU开销也大；全索引如果返回的数据多hash-join压力大可能会更慢，反之可能更快；物化视图最好只需要读取部分数据，bitmap选择率高时效率会变差。对于列存：块迭代可以提升5% - 50%性能(取决于压缩)、invisible-join可以提升50% - 70%、压缩为2倍，如果数据有序可以量级提升、延迟物化提升3倍，如果将这些全部去掉，列存跟行存就差不多了；在列存中使用反规范化大宽表效果不好，增加维度表列冗余数据变多、只有大宽表的维度属性是排序高度压缩的才有效</description>
    </item>
    
  </channel>
</rss>
