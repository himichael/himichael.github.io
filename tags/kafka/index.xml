<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on 记录每个瞬间</title>
    <link>https://code0xff.org/tags/kafka/</link>
    <description>Recent content in Kafka on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 18 Oct 2024 09:08:07 +0800</lastBuildDate><atom:link href="https://code0xff.org/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka架构</title>
      <link>https://code0xff.org/post/2024/10/kafka_architecture/</link>
      <pubDate>Fri, 18 Oct 2024 09:08:07 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2024/10/kafka_architecture/</guid>
      <description>producer, broker, consumer，consumer group消费对应的partition数据，partition 包括多个 log segment，当一个达到阈值后，变成read only，再生成一个新的；每次都是head或者tail读，以及append写，速度很快，另外用了page cache会将数据写先到缓存再刷新；每个分区都有一个leader，副本只用于备份不做读写处理；副本如果能跟上leader就会放到 ISR集合中，ISR集合中最小的读确认offset 就是高水位，低水位是下次写的offset；producer 用 ack=0、1、all来表示副本节点是否接受了消息；ZK 后面迁移到了 Z-Raft 了，还有分层存储；kafka balance 是 NP问题，kafka connect，kafka streams；未来发展：完全基于云的kafka，用C++重写的kafka，数据存储在S3上的 statefulness 的kafka</description>
    </item>
    
  </channel>
</rss>
