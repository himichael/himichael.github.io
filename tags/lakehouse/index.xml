<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lakehouse on 记录每个瞬间</title>
    <link>https://code0xff.org/tags/lakehouse/</link>
    <description>Recent content in Lakehouse on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 10 Jan 2024 09:08:07 +0800</lastBuildDate><atom:link href="https://code0xff.org/tags/lakehouse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Analyzing and Comparing Lakehouse Storage Systems</title>
      <link>https://code0xff.org/post/2024/01/lakehouse_storage_systems/</link>
      <pubDate>Wed, 10 Jan 2024 09:08:07 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2024/01/lakehouse_storage_systems/</guid>
      <description>讨论了 LakeHouse 系统设计的难点，在不可变高延迟的对象存储之上，增加事务特性，三大系统都使用了OCC做隔离，事务实现都用了MVCC，源数据库管理delta和hudi用了表格式，iceberg用了层次存储(单节点处理)，数据更新三者都支持CoW(适合读多写少场景)，hudi和iceberg支持MoR(适合写多的场景)</description>
    </item>
    
    <item>
      <title>Lakehouse A New Generation of Open Platforms that Unify Data Warehousing and Advanced Analytics</title>
      <link>https://code0xff.org/post/2023/05/lakehouse-a-new-generation-of-open-platforms-that-unify/</link>
      <pubDate>Sat, 06 May 2023 12:17:11 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/lakehouse-a-new-generation-of-open-platforms-that-unify/</guid>
      <description>第一代的数仓有很好的数据治理，缺点是计算存储耦合，且无法存储半结构数据；第二代的数据湖将计算存储分离，且能存储各种格式，云厂商推出的对象存储本质是差不多，不过扩展和可靠性更高更便宜，但二代需要两套系统，数据要在数仓和对象存储之间做ETL，有很多问题；而LakeHouse则试图解决这些问题，通过在对象存储之上增加元数据管理，实现事务功能，数据质量、ACID都实现了，因为是基于开放的格式，不会锁定厂商，也能支持各种场景。因为开放的格式和对象存储的延迟问题，性能和每秒事务不会很好，通过缓存系统、辅助数据结构、数据布局优化来优化性能，另外DataFream 支持SQL和 API，可以延迟处理这样可以进一步优化。目前的限制：S3的延迟、单表事务、servless；通过TPC-DS对比其他云厂商的数仓，性能和价格都很不错，还能支持传统场景，机器学习、科学分析等各种复杂场景。</description>
    </item>
    
  </channel>
</rss>
