<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LLVM on 记录每个瞬间</title>
    <link>https://code0xff.org/tags/llvm/</link>
    <description>Recent content in LLVM on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 05 Feb 2023 17:35:19 +0800</lastBuildDate><atom:link href="https://code0xff.org/tags/llvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Efficiently Compiling Efficient Query Plans for Modern Hardware</title>
      <link>https://code0xff.org/post/2023/02/efficiently-compiling-efficient-query-plans-for-modern-hardware/</link>
      <pubDate>Sun, 05 Feb 2023 17:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/efficiently-compiling-efficient-query-plans-for-modern-hardware/</guid>
      <description>这是HyPer的一篇论文(HyPer是由德国莫尼黑大学主导的OLAP、OLTP混合型主内存数据库)，介绍了code-gen的具体实现，最初HyPer的code-gen是生成了C++代码，然后使用gcc编译；但编译时间很长，再加上优化时间就更长了，甚至比查询执行时间还长；于是HyPer做了优化，改用LLVM，将code-gen的核心代码转为了LLVM的IR，这个IR是调用LLVM的API生成的，不是手写的所以相对容易一些，对于一些简单的操作是生成了LLVM，于是复杂的操作，如scan、join、sort需要将LLVM和C++混合执行，LLVM可以直接调用C++，所以不存在性能损失；通过最后执行来看，LLVM的code-gen从编译、优化时间，SQL执行时间，都比其他系统有很大提升</description>
    </item>
    
  </channel>
</rss>
