<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://himichael.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Sep 2021 14:09:03 +0800</lastBuildDate><atom:link href="https://himichael.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试一下</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</link>
      <pubDate>Wed, 22 Sep 2021 14:09:03 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</guid>
      <description>[[TOC]]
本文根据腾讯云数据库官方文档，总结了
 MySQL版 PostgreSQL版  两个数据库的总体架构、具体操作、计费等情况
由于数据库没有试用版，本文主要是通过阅读官方文档做出的总结
MySQL官方文档 -&amp;gt; 【链接】
PostgreSQL官方文档 -&amp;gt; 【链接】
MySQL版 总体概览 看展示的图片(控制台操作界面)，貌似是 MySQL8.x 改造的 单机分片最大量6T，最大QPS 24W
其原理是基于 shard-key做分片，这是目前已有的实现方案，这里的TProxy没找到介绍，可能是腾讯自己研发的，或者基于开源实现改造的  对原生MySQL新增的功能：
1、自动数据平衡
 新增节时候，自动平衡数据，但会有几秒-几十秒的不可写 升级节点时，将旧节点数据-&amp;gt;新节点，然后proxy指向新节点
  2、复制方式 在 MySQL自己的强同步之上，增加了异步特性
比如 5个行程，处理10个事务，看性能测试 写和混合读写时候，比原生MySQL快 20-30%左右 3、shard-key，修改了MySQL语法，在创建表的时候指定了按哪个字段做分片
在写入的时候，必须指定分片字段，否则报错
 SLA，99.95%
 计费 计费方式：包年包月、按需计费 梯度计费
1、0 - 96 小时
2、96 - 360 小时 3、&amp;gt; 360小时
使用时间越长，价格越低
总费用 = 实例费用 + 备份空间费用（目前免费）+ 流量费用（目前免费）
实例费用 = 节点价格 × 节点数量 × 分片数量 = (节点内存 × 内存价格 + 节点硬盘 × 硬盘价格) × 节点数量 × 分片数量</description>
    </item>
    
    <item>
      <title>Wokao</title>
      <link>https://himichael.github.io/post/2021/09/wokao/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/wokao/</guid>
      <description>111111 final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.head), Nil) t.tl = nx t = nx rest = rest.tail } h.asInstanceOf[That] } } else super.map(f) } 测试一下</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://himichael.github.io/post/first/</link>
      <pubDate>Wed, 22 Sep 2021 13:44:18 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/first/</guid>
      <description>aaa &amp;hellip;&amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;.
呵呵 python
def dfs(root): if not root: return dfs(root.left) print(root.val) dfs(root.right) 哈哈</description>
    </item>
    
  </channel>
</rss>
