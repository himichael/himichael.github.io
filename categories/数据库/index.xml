<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on 记录每个瞬间</title>
    <link>https://code0xff.org/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 13 May 2023 09:23:04 +0800</lastBuildDate><atom:link href="https://code0xff.org/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Optimal Column Layout for Hybrid Workloads</title>
      <link>https://code0xff.org/post/2023/05/optimal_column_layout_for_hybrid_workloads/</link>
      <pubDate>Sat, 13 May 2023 09:23:04 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/optimal_column_layout_for_hybrid_workloads/</guid>
      <description>基于 HTAP 场景的列布局优化，仍然使用列布局，但是对列做水平分区，一个分区内包含多个 block，每个block 的大小是 CPU cache 的数倍，这样更好利用CPU；每个分区根据是否为边界(0 或 1 表示)，输出为一堆的 bit范围，这是一个 NP hard问题，也有相关研究可以解决此问题；工作负载包括：点查询、范围查询、插入、删除、更新；每种场景对应底层 I/O 包括 随机读、随机写、顺序读、顺序写，不同场景对于 block的访问频率也是不同的，论文给出了 10 种统计的直方图；之后收集各种负载的 block 访问情况然后离线分析，再将分析后的结果优化，输出为一堆bit，这样就可以动态调整分区，达到了自适应的效果；从性能分析结果看，可以适用于各种场景，除了读基本不变，其他场景都有大幅度提升，同时吞吐量也保持不变</description>
    </item>
    
    <item>
      <title>Column-Stores vs. Row-Stores: How Different Are They Really?</title>
      <link>https://code0xff.org/post/2023/05/column-stores_vs_row-stores_how_different_are_they_really/</link>
      <pubDate>Sun, 07 May 2023 13:23:04 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/column-stores_vs_row-stores_how_different_are_they_really/</guid>
      <description>论文中通过行存系统来模拟列存，并将几个可能提升的关键点：延迟物化、块迭代、压缩、invisible-join，挨个拆分，并分析每种可能提升的原因和提升比例‘在行存的系统中使用垂直分区依然达不到列存性能，因为垂直分区后需要冗余存储主键，重建这些tuple 需要hash-join，数量大内存CPU开销也大；全索引如果返回的数据多hash-join压力大可能会更慢，反之可能更快；物化视图最好只需要读取部分数据，bitmap选择率高时效率会变差。对于列存：块迭代可以提升5% - 50%性能(取决于压缩)、invisible-join可以提升50% - 70%、压缩为2倍，如果数据有序可以量级提升、延迟物化提升3倍，如果将这些全部去掉，列存跟行存就差不多了；在列存中使用反规范化大宽表效果不好，增加维度表列冗余数据变多、只有大宽表的维度属性是排序高度压缩的才有效</description>
    </item>
    
    <item>
      <title>Lakehouse A New Generation of Open Platforms that Unify Data Warehousing and Advanced Analytics</title>
      <link>https://code0xff.org/post/2023/05/lakehouse-a-new-generation-of-open-platforms-that-unify/</link>
      <pubDate>Sat, 06 May 2023 12:17:11 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/lakehouse-a-new-generation-of-open-platforms-that-unify/</guid>
      <description>第一代的数仓有很好的数据治理，缺点是计算存储耦合，且无法存储半结构数据；第二代的数据湖将计算存储分离，且能存储各种格式，云厂商推出的对象存储本质是差不多，不过扩展和可靠性更高更便宜，但二代需要两套系统，数据要在数仓和对象存储之间做ETL，有很多问题；而LakeHouse则试图解决这些问题，通过在对象存储之上增加元数据管理，实现事务功能，数据质量、ACID都实现了，因为是基于开放的格式，不会锁定厂商，也能支持各种场景。因为开放的格式和对象存储的延迟问题，性能和每秒事务不会很好，通过缓存系统、辅助数据结构、数据布局优化来优化性能，另外DataFream 支持SQL和 API，可以延迟处理这样可以进一步优化。目前的限制：S3的延迟、单表事务、servless；通过TPC-DS对比其他云厂商的数仓，性能和价格都很不错，还能支持传统场景，机器学习、科学分析等各种复杂场景。</description>
    </item>
    
    <item>
      <title>Building An Elastic Query Engine on Disaggregated Storage</title>
      <link>https://code0xff.org/post/2023/05/building-an-elastic-query-engine-on-disaggregated-storage/</link>
      <pubDate>Thu, 04 May 2023 09:23:04 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/building-an-elastic-query-engine-on-disaggregated-storage/</guid>
      <description>SnowFlake的一篇论文，目前的架构包含四层：中心化的服务处理端到端的查询、计算层、临时存储层、对象存储层，并讨论了设计临时存储这一层的原因，通过访问数据指标能发现，临时存储的需求变化很大，跟计算层，远端持久存储层都不同。为更好的提高利用率需要计算层跟 临时存储层解耦。调度方面包括：工作窃取、延迟的一致性hash。由于云厂商的计费方式支持到秒级别，原先的预热VM 方式不好使了需要采用共享资源的方式来支持多租户，带来的挑战是，重新设计临时存储层(这层缓存了持久数据和中间数据，扩容会影响其他租户)，需要提供私有地址。三个开放问题：临时存和计算层解耦、内存-SSD-远端存储三层机制的有效管理、亚秒计费策略的共享资源架构挑战</description>
    </item>
    
    <item>
      <title>What Goes Around Comes Around</title>
      <link>https://code0xff.org/post/2023/05/what-goes-around-comes-around/</link>
      <pubDate>Wed, 03 May 2023 11:23:04 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/05/what-goes-around-comes-around/</guid>
      <description>Stonebraker的论文，介绍了 9个不同时代的数据模型；层次数据库IMS，以及网络数据库CODASYL，这两者都是逻辑数据、物理数据耦合，之后出现了关系模型，有了数据独立；再往后就是各种对关系模型的补充，如实体-关系模型、关系模型++、语义数据模型、OO模型、对象关系模型、半结构模型等；从中我们可以总结到：查询优化器很有用、技术的争论通常由市场和其他因素决定，简单模型比复制模型更容易实现数据独立、KISS 保持简单是很重要的、除非用户使用中出现很大问题否则他们不会买单、没有编程语言社区的支持想在语言上做改进突破很难、新技术的推广，需要标准化，或者大力度的推广、schema-last 可能只合适小部分场景</description>
    </item>
    
    <item>
      <title>bustub数据库</title>
      <link>https://code0xff.org/post/2023/03/bustub%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Mon, 20 Mar 2023 14:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/03/bustub%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>卡耐基梅隆的bustub数据库，实验课程；包括：LRU-k实现、可扩展的hash表、B+的的增删改查、B+树的并发控制、各种SQL算子的执行和优化，并发处理</description>
    </item>
    
    <item>
      <title>CPU and Cache Efficient Management of Memory-Resident Databases</title>
      <link>https://code0xff.org/post/2023/02/cpu-and-cache-efficient-management-of-memory-resident-databases/</link>
      <pubDate>Wed, 08 Feb 2023 17:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/cpu-and-cache-efficient-management-of-memory-resident-databases/</guid>
      <description>CPU and Cache Efficient Management of Memory-Resident Databases</description>
    </item>
    
    <item>
      <title>Efficiently Compiling Efficient Query Plans for Modern Hardware</title>
      <link>https://code0xff.org/post/2023/02/efficiently-compiling-efficient-query-plans-for-modern-hardware/</link>
      <pubDate>Sun, 05 Feb 2023 17:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/efficiently-compiling-efficient-query-plans-for-modern-hardware/</guid>
      <description>这是HyPer的一篇论文(HyPer是由德国莫尼黑大学主导的OLAP、OLTP混合型主内存数据库)，介绍了code-gen的具体实现，最初HyPer的code-gen是生成了C++代码，然后使用gcc编译；但编译时间很长，再加上优化时间就更长了，甚至比查询执行时间还长；于是HyPer做了优化，改用LLVM，将code-gen的核心代码转为了LLVM的IR，这个IR是调用LLVM的API生成的，不是手写的所以相对容易一些，对于一些简单的操作是生成了LLVM，于是复杂的操作，如scan、join、sort需要将LLVM和C++混合执行，LLVM可以直接调用C++，所以不存在性能损失；通过最后执行来看，LLVM的code-gen从编译、优化时间，SQL执行时间，都比其他系统有很大提升</description>
    </item>
    
    <item>
      <title>Generating code for holistic query evaluation</title>
      <link>https://code0xff.org/post/2023/02/generating-code-for-holistic-query-evaluation/</link>
      <pubDate>Sat, 04 Feb 2023 07:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/generating-code-for-holistic-query-evaluation/</guid>
      <description>英国爱丁堡大学的一篇论文，从传统系统到现代系统的变化一个重要点是：内存增大很多，以前的I/O瓶颈对于现在来说不那么重要了，反而是CPU和内存瓶颈；而之前的火山模型对于CPU利用率来说很不好，大量的虚函数调用，多层级的函数调用增加了cache miss，也会产生更多的指令，不利于并行化和cache局部性；这篇论文提出了一个代码模板，通过识别不同的查询计划算子，来对应的生成不同的代码(对应一个大函数)，不同函数之间通过物化来连接，之后通过编译器GCC来编译这段C代码，还可以对代码最O2级别优化(但会增加运行期执行时间)来达到更好的效果，论文对比了join、sort、聚合，虽然使用的是NSM存储模型，但是执行效果来看跟MonetDB的DSM差不多了；代码生成的缺点是对于小查询会有额外的开销(编译、优化、link时间)</description>
    </item>
    
    <item>
      <title>Implementing Database Operations Using SIMD Instructions</title>
      <link>https://code0xff.org/post/2023/02/implementing-database-operations-using-simd-instructions/</link>
      <pubDate>Wed, 01 Feb 2023 07:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/02/implementing-database-operations-using-simd-instructions/</guid>
      <description>介绍了SIMD指令一些基本概念，并行流水线，以及分支预测失败带来的影响；论文中提到了使用SIMD指令的方式，以及不同平台产生的差异；之后用伪代码的方式描述几个数据库常用操作；scan操作详细对比了标量版和SIMD版的区别，以及如何消除分支的方式，还有返回选中的一个元素、多个元素的标量、SIMD方式；聚合的实现方式SIMD有提供相关的操作 SIMD_min、SIMD_max即可，对于索引部分主要是介绍树结构索引，详细讨论了中间节点、叶子节点的实现方式；在有序元素上使用二分效率是非常高的，但也会有分支预测失败问题，论文中给出了混合二分+顺序扫描方式；最后是join处理方式，这里只列出了nested-loop join的SIMD实现，Duplicate-outer、Duplicate-inner、Rotate-inner</description>
    </item>
    
    <item>
      <title>Rethinking SIMD Vectorization for In-Memory Databases</title>
      <link>https://code0xff.org/post/2023/01/rethinking-simd-vectorization-for-in-memory-databases/</link>
      <pubDate>Fri, 27 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/rethinking-simd-vectorization-for-in-memory-databases/</guid>
      <description>这是Oracle联合哥伦比亚大学做的研究，论文中讨重点讨论了数据并行化(线程、指令、数据)，也就是SIMD实现；论文中给出了一些基本的SIMD操作，如selective sotre/load、gather、scatter，在论文发表的时候，这几个操作主流CPU不是全支持，只能通过一些模拟操作来支持，如permutation等；通过定义这四个最基本的操作，再往上就可以定义数据库查询中比较重要的操作了，如：scan、hash-table(horizontal、vertical、build、线性探测、double hash、cuckoo hash)、bloom filter、分区(radix、hash、range)；通过hash、分区等操作，又可以定义出排序、join等更复杂的操作，相当于是层层搭积木；测试结果SIMD会有大幅度性能提升，但也受到cache size的影响</description>
    </item>
    
    <item>
      <title>SIMD-Scan: Ultra Fast in-Memory Table Scan using onChip Vector Processing Units</title>
      <link>https://code0xff.org/post/2023/01/ultra-fast-in-memory-table-scan-using-onchip-vector-processing-units/</link>
      <pubDate>Thu, 19 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/ultra-fast-in-memory-table-scan-using-onchip-vector-processing-units/</guid>
      <description>现代数据库由I/O瓶颈转向了CPU瓶颈，利用多核能力加速全表扫描，但是向量化的能力没能充分发挥。使用向量化包括：内嵌汇编、硬件厂商提供的跨平台库函数、编译器指示符、编译器自动优化，每种都是可用性和可控性之间的权衡。论文中引入了两项优化：使用SIMD方式在寄存器中解压 轻量压缩数据(使用concatenate、shift、shuffle、mark等指令完成)；使用SIMD完成等值和范围查找(使用掩码指令，将4个元素加载到寄存器中，再通过min、max比较范围，最后生成索引数组向量位)，通过测试结果都有大幅度提升，并且优化实现可以适用各种数据库</description>
    </item>
    
    <item>
      <title>Make the most out of your SIMD investments: counter control flow divergence in compiled query pipelines</title>
      <link>https://code0xff.org/post/2023/01/make-the-most-out-of-your-simd-investments/</link>
      <pubDate>Tue, 17 Jan 2023 06:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/make-the-most-out-of-your-simd-investments/</guid>
      <description>现代数据库很多都采用了向量化执行，也就是利用 SIMD 指令，SIMD指令在碰到分支时，会出现部分元素不满足条件，导致不活跃影响利用率吞吐量下降，论文中利用了 AVX512指令集的：mark指令、permute指令、compress、expand，来实现重填充算法和策略；包括：全消费策略(需增加寄存器，主要利用buffer)，以及部分消费策略(增加新寄存器，利用mark)，在能放入cache的场景中，这两种算法表现的都不错，是scalar的两倍，但对于复杂场景，以及cache放不下的场景则表现退化，另外如何设置 阈值也是一个开放问题</description>
    </item>
    
    <item>
      <title>Accelerating Analytics with Dynamic In-Memory Expressions</title>
      <link>https://code0xff.org/post/2023/01/accelerating-analytics-with-dynamic-in-memory-expressions/</link>
      <pubDate>Fri, 13 Jan 2023 14:05:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/accelerating-analytics-with-dynamic-in-memory-expressions/</guid>
      <description>Oracle12推出了混合行/列的存储格式，磁盘(buffer pool)中按列存储，内存中按列存储加速OLAP场景；而表达式求值在很多场景下是黑盒，不易监控、也占用资源，Oracle捕获了频繁使用的表达式，将表达式物化到内存中，然后在查询计划中，根据代价来改变查询计划，将原始的查询计划的子树，替换为内存中的物化表达式，在OLAP场景中大幅度提升性能，在混合OLTP场景中也非常有效</description>
    </item>
    
    <item>
      <title>Materialization Strategies in the Vertica Analytic Database: Lessons Learned</title>
      <link>https://code0xff.org/post/2023/01/materialization-strategies-in-the-vertica-analytic-database-lessons-learned/</link>
      <pubDate>Sat, 07 Jan 2023 20:05:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/materialization-strategies-in-the-vertica-analytic-database-lessons-learned/</guid>
      <description>列存数据库会通过物化的方式来重建tuple，包括早期物化EM、延迟物化LM，延迟物化的性能更好，但实现更难，当出现join溢出时会出现，此时会退回到早期物化；论文在早期物化基础上增加了：边信息传递SIP技术，并给出了实现细节，如何创建SIP，如何做push down；使用EM+SIP技术，比原始的EM性能大幅度提升，并且在很多场景下比延迟物化LM性能更好</description>
    </item>
    
    <item>
      <title>MonetDB/X100: Hyper-Pipelining Query Execution</title>
      <link>https://code0xff.org/post/2023/01/monetdbx100-hyper-pipelining-query-execution/</link>
      <pubDate>Thu, 05 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/monetdbx100-hyper-pipelining-query-execution/</guid>
      <description>2005年的一篇论文，通过分析MySQL、MonetDB发现这两种没有达到硬件上的预期效果，MySQL是因为经典的火山模型导致编译器没法利用循环流水线，出现大量CPU等待；而MonetDB避免了上述情况但使用了物化，又导致大量的内存带宽拷贝；这篇论文结合了这两者的特点，选择了向量化的执行方式，并配合了合适的cache size，使得执行效率大幅度提升</description>
    </item>
    
    <item>
      <title>Access Path Selection in Main-Memory Optimized Data Systems Should I Scan or Should I Probe</title>
      <link>https://code0xff.org/post/2023/01/access-path-selection-in-main-memory-optimized-data-systems-should-i-scan-or-should-i-probe/</link>
      <pubDate>Tue, 03 Jan 2023 10:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2023/01/access-path-selection-in-main-memory-optimized-data-systems-should-i-scan-or-should-i-probe/</guid>
      <description>CMU Query Execution &amp;amp; Processing课程的一篇论文，现代分析系统中scan越来越重要，但二级索引依然有用，通过对比硬件参数、数据布局、压缩、并发等综合情况考虑之下，来选择：scan执行 或者index执行；通过性能评估发现，调节scan或者index并不是一个固定的值，而是根据不同的参数以及硬件情况，会动态变化的</description>
    </item>
    
    <item>
      <title>调试MySQL</title>
      <link>https://code0xff.org/post/2022/11/%E8%B0%83%E8%AF%95mysql/</link>
      <pubDate>Sun, 20 Nov 2022 08:35:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2022/11/%E8%B0%83%E8%AF%95mysql/</guid>
      <description>搭建一个MySQL调试环境</description>
    </item>
    
    <item>
      <title>Architecture of a Database System论文翻译</title>
      <link>https://code0xff.org/post/2022/09/architecture-of-a-database-system/</link>
      <pubDate>Sat, 03 Sep 2022 11:11:11 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2022/09/architecture-of-a-database-system/</guid>
      <description>Hellerstein、Michael Stonebraker、James Hamilton几位大神写的数据库系统架构</description>
    </item>
    
    <item>
      <title>确定要在DBMS中用mmap吗</title>
      <link>https://code0xff.org/post/2022/08/%E7%A1%AE%E5%AE%9A%E8%A6%81%E5%9C%A8dbms%E4%B8%AD%E7%94%A8mmap%E5%90%97/</link>
      <pubDate>Thu, 11 Aug 2022 19:08:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2022/08/%E7%A1%AE%E5%AE%9A%E8%A6%81%E5%9C%A8dbms%E4%B8%AD%E7%94%A8mmap%E5%90%97/</guid>
      <description>2022年 CIDR的一篇论文，CMU的网红教授发表的，介绍mmap的概念，以及为什么数据库不要用mmap</description>
    </item>
    
    <item>
      <title>为何Uber要将PostgreSQL迁到MySQL</title>
      <link>https://code0xff.org/post/2022/08/%E4%B8%BA%E4%BD%95uber%E8%A6%81%E5%B0%86postgresql%E8%BF%81%E5%88%B0mysql/</link>
      <pubDate>Mon, 08 Aug 2022 12:12:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2022/08/%E4%B8%BA%E4%BD%95uber%E8%A6%81%E5%B0%86postgresql%E8%BF%81%E5%88%B0mysql/</guid>
      <description>2016年的一篇文章，讲述了uber为什么要将PostgreSQL迁移到MySQL</description>
    </item>
    
    <item>
      <title>容灾部署调研</title>
      <link>https://code0xff.org/post/2022/07/%E5%AE%B9%E7%81%BE%E9%83%A8%E7%BD%B2%E8%B0%83%E7%A0%94/</link>
      <pubDate>Sat, 30 Jul 2022 14:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2022/07/%E5%AE%B9%E7%81%BE%E9%83%A8%E7%BD%B2%E8%B0%83%E7%A0%94/</guid>
      <description>容灾部署调研</description>
    </item>
    
    <item>
      <title>What&#39;s Really New with NewSQL论文</title>
      <link>https://code0xff.org/post/2022/07/whats-really-new-with-newsql%E8%AE%BA%E6%96%87/</link>
      <pubDate>Sun, 03 Jul 2022 20:32:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2022/07/whats-really-new-with-newsql%E8%AE%BA%E6%96%87/</guid>
      <description>What’s Really New with NewSQL? 论文 2016年发表在 sigmod上的</description>
    </item>
    
    <item>
      <title>HANA和TeraData数据库迁移调研</title>
      <link>https://code0xff.org/post/2021/11/hana%E5%92%8Cteradata%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E8%B0%83%E7%A0%94/</link>
      <pubDate>Fri, 26 Nov 2021 17:46:21 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2021/11/hana%E5%92%8Cteradata%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E8%B0%83%E7%A0%94/</guid>
      <description>调研HANA和TD的数据类型，各种语法，调研迁移的可能性</description>
    </item>
    
    <item>
      <title>TPC-DS</title>
      <link>https://code0xff.org/post/2021/11/tpc-ds/</link>
      <pubDate>Fri, 26 Nov 2021 17:46:21 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2021/11/tpc-ds/</guid>
      <description>TPC-DS的安装和测试</description>
    </item>
    
    <item>
      <title>A Critique of ANSI SQL Isolation Levels论文</title>
      <link>https://code0xff.org/post/2021/11/a-critique-of-ansi-sql-isolation-levels/</link>
      <pubDate>Fri, 26 Nov 2021 13:06:19 +0800</pubDate>
      
      <guid>https://code0xff.org/post/2021/11/a-critique-of-ansi-sql-isolation-levels/</guid>
      <description>读A Critique of ANSI SQL Isolation Levels论文</description>
    </item>
    
  </channel>
</rss>
