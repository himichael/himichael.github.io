<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录每个瞬间</title>
    <link>https://himichael.github.io/</link>
    <description>Recent content on 记录每个瞬间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 26 Sep 2021 14:09:03 +0800</lastBuildDate><atom:link href="https://himichael.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linked</title>
      <link>https://himichael.github.io/linked/</link>
      <pubDate>Mon, 27 Sep 2021 15:48:20 +0800</pubDate>
      
      <guid>https://himichael.github.io/linked/</guid>
      <description>。。。。。。。。。。。。。。。。。</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://himichael.github.io/archives/</link>
      <pubDate>Mon, 27 Sep 2021 15:48:07 +0800</pubDate>
      
      <guid>https://himichael.github.io/archives/</guid>
      <description>。。。。。。。。。。。。。。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://himichael.github.io/about/</link>
      <pubDate>Mon, 27 Sep 2021 15:47:39 +0800</pubDate>
      
      <guid>https://himichael.github.io/about/</guid>
      <description>关于。。。。。。。。。</description>
    </item>
    
    <item>
      <title>丽江之行</title>
      <link>https://himichael.github.io/post/2021/10/%E4%B8%BD%E6%B1%9F%E4%B9%8B%E8%A1%8C/</link>
      <pubDate>Sun, 26 Sep 2021 14:09:03 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/10/%E4%B8%BD%E6%B1%9F%E4%B9%8B%E8%A1%8C/</guid>
      <description>游丽江古城、大理洱海</description>
    </item>
    
    <item>
      <title>调研的文章</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</link>
      <pubDate>Wed, 22 Sep 2021 14:09:03 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</guid>
      <description>调研TD-SQL问题</description>
    </item>
    
    <item>
      <title>Wokao</title>
      <link>https://himichael.github.io/post/2021/09/wokao/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/wokao/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>测试文章-1</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-1/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-1/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>测试文章-2</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-2/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-2/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>测试文章-3</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-3/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-3/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>测试文章-4</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-4/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-4/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>测试文章-5</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-5/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-5/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>测试文章-6</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-6/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-6/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>测试文章-7</title>
      <link>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-7/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0-7/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>靠他二大爷！</title>
      <link>https://himichael.github.io/post/2021/09/spf13-vim-3-0-release-and-new-website/</link>
      <pubDate>Wed, 22 Sep 2021 13:58:33 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/2021/09/spf13-vim-3-0-release-and-new-website/</guid>
      <description>111111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  final override def map[B, That](f: A =&amp;gt; B)(implicit bf: CanBuildFrom[List[A], B, That]): That = { if (bf eq List.ReusableCBF) { if (this eq Nil) Nil.asInstanceOf[That] else { val h = new ::[B](f(head), Nil) var t: ::[B] = h var rest = tail while (rest ne Nil) { val nx = new ::(f(rest.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://himichael.github.io/post/first/</link>
      <pubDate>Wed, 22 Sep 2021 13:44:18 +0800</pubDate>
      
      <guid>https://himichael.github.io/post/first/</guid>
      <description>aaa &amp;hellip;&amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;.
呵呵 python
1 2 3 4 5 6  def dfs(root): if not root: return dfs(root.left) print(root.val) dfs(root.right)   哈哈 图片- &amp;gt;</description>
    </item>
    
  </channel>
</rss>
